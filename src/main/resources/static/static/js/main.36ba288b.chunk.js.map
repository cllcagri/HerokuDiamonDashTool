{"version":3,"sources":["actions/projectActions.js","actions/types.js","components/Project/ProjectItem.js","components/Project/CreateProjectButton.js","components/Dashboard.js","SecurityUtils/setJWTToken.js","actions/securityActions.js","reducers/errorReducer.js","reducers/projectReducer.js","reducers/backlogReducer.js","reducers/securityReducer.js","reducers/index.js","store.js","components/Layout/Header.js","components/Project/AddProject.js","components/Project/UpdateProject.js","actions/backlogActions.js","components/ProjectBoard/ProjectTasks/ProjectTask.js","components/ProjectBoard/Backlog.js","components/ProjectBoard/ProjectBoard.js","components/ProjectBoard/ProjectTasks/AddProjectTask.js","components/ProjectBoard/ProjectTasks/UpdateProjectTask.js","components/UserManagement/Register.js","components/UserManagement/Login.js","components/Layout/Landing.js","SecurityUtils/secureRoute.js","App.js","serviceWorker.js","index.js"],"names":["createProject","project","history","dispatch","a","axios","post","push","type","payload","response","data","projectStyle","color","fontStyle","fontWeight","orderList","textAlign","ProjectItem","handleDelete","id","props","deleteProject","this","className","projectIdentifier","projectName","description","to","style","href","onClick","bind","React","Component","connect","projectId","window","confirm","delete","CreateProjectButton","Fragment","Dashboard","getProjects","listProjects","projects","map","key","height","state","get","res","setJWTToken","token","defaults","headers","common","logoutUser","localStorage","removeItem","initialState","project_tasks","project_task","validToken","user","booleanActionPayload","combineReducers","errors","action","filter","backlog","projectSequence","security","logger","createLogger","collapsed","diff","store","navigator","userAgent","includes","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","pngStyle","width","paddingBottom","Header","location","headerLinks","userIsAuthenticated","fullName","logout","userIsNotAuthenticated","src","data-toggle","data-target","aria-controls","aria-expanded","aria-label","AddProject","handleChange","e","setState","target","name","value","handleSubmit","preventDefault","newProject","startDate","endDate","console","log","nextProps","nextContext","onSubmit","classnames","placeholder","onChange","background","UpdateProject","updateProject","match","params","getProject","alertBoxName","alertBoxDesc","Object","keys","length","role","disabled","addProjectTask","backlogId","projectTask","ProjectTask","ptId","deleteProjectTask","priority","summary","acceptanceCriteria","projectIdentifer","backgroundColor","marginTop","Backlog","tasks","project_tasks_prop","todoTasks","progressTasks","doneTasks","i","status","ProjectBoard","getBacklog","BoardContent","message","marginLeft","BoardAlgorithm","AddProjectTask","newProjectTask","dueDate","UpdateProjectTask","updateProjectTask","create_At","getProjectTask","backlog_id","pt_id","Register","newUser","username","password","confirmPassword","createNewUser","required","Login","newLogin","loginUser","LoginRequest","setItem","decoded","jwt_decode","Landing","component","otherProps","render","jwtToken","decoded_jwtToken","currentTime","Date","now","exp","App","exact","path","Boolean","hostname","ReactDOM","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.36ba288b.chunk.js","sourcesContent":["import axios from \"axios\";\nimport {GET_ERRORS, GET_PROJECT, GET_PROJECTS, DELETE_PROJECT} from \"./types\";\n\nexport const createProject = (project, history) => async dispatch => {\n    try {\n        await axios.post(\"https://diamondashtool.herokuapp.com/api/project\", project);\n        history.push(\"/dashboard\");\n        dispatch({\n            type: GET_ERRORS,\n            payload: {}\n        });\n    } catch (err) {\n        dispatch({\n            type: GET_ERRORS,\n            payload: err.response.data\n        });\n    }\n};\n\n// get porjects from java backend\nexport const getProjects = () => async dispatch => {\n    const res = await axios.get(\"https://diamondashtool.herokuapp.com/api/project/all\");\n    dispatch({\n        type: GET_PROJECTS,\n        payload: res.data\n    });\n};\n\nexport const getProject = (projectId, history) => async dispatch => {\n    try {\n        const res = await axios.get(`https://diamondashtool.herokuapp.com/api/project/${projectId}`);\n        dispatch({\n            type: GET_PROJECT,\n            payload: res.data\n        });\n    } catch (error) {\n        history.push('/dashboard');\n    }\n};\n\nexport const deleteProject = (projectId) => async dispatch => {\n    if (window.confirm('Do you want to Delete this project ?')) {\n        await axios.delete(`https://diamondashtool.herokuapp.com/api/project/${projectId}`);\n        dispatch({\n            type: DELETE_PROJECT,\n            payload: projectId\n        });\n    }\n};","export const GET_ERRORS = \"GET_ERRORS\";\nexport const GET_PROJECTS = \"GET_PROJECTS\";\nexport const GET_PROJECT = \"GET_PROJECT\";\nexport const DELETE_PROJECT = \"DELETE_PROJECT\";\n\n//types for the backlog actions\nexport const GET_BACKLOG = \"GET_BACKLOG\";\nexport const GET_PROJECT_TASKS = \"GET_PROJECT_TASKS\";\nexport const GET_PROJECT_TASK = \"GET_PROJECT_TASK\";\nexport const DELETE_PROJECT_TASK = \"DELETE_PROJECT_TASK\";\n\n//user actions\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";","import React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport {deleteProject} from \"../../actions/projectActions\";\n\nconst projectStyle = {\n    color: \"#343a40\",\n    fontStyle: \"normal\",\n    fontWeight: \"bold\"\n};\n\nconst orderList = {\n    textAlign: \"center\"\n};\n\nclass ProjectItem extends React.Component {\n\n    handleDelete = (id) => {\n        this.props.deleteProject(id);\n    };\n\n    render() {\n        const {project} = this.props;\n        return (\n            <div className=\"container\">\n                <div className=\"card card-body bg-light mb-3\">\n                    <div className=\"row\">\n                        <div className=\"col-2\">\n                            <span className=\"mx-auto\">{project.projectIdentifier}</span>\n                        </div>\n                        <div className=\"col-lg-6 col-md-4 col-8\">\n                            <h3>{project.projectName}</h3>\n                            <p>{project.description}</p>\n                        </div>\n                        <div className=\"col-md-4 d-none d-lg-block\">\n                            <ul className=\"list-group\">\n                                <Link to={`/projectBoard/${project.projectIdentifier}`}>\n                                    <li className=\"list-group-item board\" style={orderList}>\n                                        <i style={projectStyle}>Project Board </i>\n                                    </li>\n                                </Link>\n                                <Link to={`/updateProject/${project.projectIdentifier}`}>\n                                    <li className=\"list-group-item update\" style={orderList}>\n                                        <i style={projectStyle}>Update Project Info</i>\n                                    </li>\n                                </Link>\n                                <a href=\"\">\n                                    <li className=\"list-group-item delete\" style={orderList}\n                                        onClick={this.handleDelete.bind(this, project.projectIdentifier)}>\n                                        <i style={projectStyle}><span\n                                            style={{color: \"#ff6347\"}}>Delete Project</span></i>\n                                    </li>\n                                </a>\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nProjectItem.propTypes = {\n    deleteProject: PropTypes.func.isRequired\n};\n\n\nexport default connect(null, {deleteProject})(ProjectItem);","import React from \"react\";\nimport {BrowserRouter as Router, Switch, Route, Link} from \"react-router-dom\";\n\nconst CreateProjectButton = () => {\n  return(\n      <React.Fragment>\n          <Link to=\"/addProject\"  className=\"btn btn-lg btn-info\">\n              Create Project\n          </Link>\n      </React.Fragment>\n  );\n};\n\n\nexport default CreateProjectButton;","import React from \"react\";\nimport ProjectItem from \"./Project/ProjectItem\";\nimport CreateProjectButton from \"./Project/CreateProjectButton\";\nimport {connect} from \"react-redux\";\nimport {getProjects} from \"../actions/projectActions\";\nimport PropTypes from \"prop-types\";\nimport '../App.css';\n\nclass Dashboard extends React.Component {\n\n    componentDidMount() {\n        this.props.getProjects();\n    }\n\n    render() {\n        const projects = this.props.project.projects;\n        const listProjects = projects.map((project) =>\n            <ProjectItem key={project.id} project = {project}/>\n        );\n\n        return (\n                <div className=\"dash-component\">\n                    <div className=\"container\" style={{height:\"800px\"}}>\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <br/>\n                                <CreateProjectButton />\n                                <br/>\n                                <hr/>\n                                {listProjects}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n        );\n    }\n}\n\nDashboard.propTypes = {\n    project: PropTypes.object.isRequired,\n    getProjects: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state =>({\n  project: state.project\n});\n\nexport default connect(mapStateToProps, {getProjects})(Dashboard);\n","import axios from \"axios\";\n\nconst setJWTToken = token => {\n    if (token) {\n        axios.defaults.headers.common[\"Authorization\"] = token;\n    }else{\n        delete axios.defaults.headers.common[\"Authorization\"];\n    }\n};\n\nexport default setJWTToken;","import axios from \"axios\";\nimport {GET_ERRORS, SET_CURRENT_USER} from \"./types\";\nimport setJWTToken from \"../SecurityUtils/setJWTToken\";\nimport jwt_decode from \"jwt-decode\";\n\nexport const createNewUser = (newUser, history) => async dispatch => {\n    try {\n        await axios.post(\"https://diamondashtool.herokuapp.com/api/users/register\", newUser);\n        history.push(\"/login\");\n        dispatch({\n            type: GET_ERRORS,\n            payload: {}\n        });\n    } catch (err) {\n        dispatch({\n            type: GET_ERRORS,\n            payload: err.response.data\n        });\n    }\n};\n\n\nexport const loginUser = LoginRequest => async dispatch => {\n    try {\n        // post => Login Request\n        const res = await axios.post(\"https://diamondashtool.herokuapp.com/api/users/login\", LoginRequest);\n        // extract token from res.data\n        const {token} = res.data;\n        // store the token in the localStorage\n        localStorage.setItem(\"jwtToken\", token);\n        // set our token in header ***\n        setJWTToken(token);\n        // decode token on React\n        const decoded = jwt_decode(token);\n        // dispatch to our securityReducer\n        dispatch({\n            type: SET_CURRENT_USER,\n            payload: decoded\n        });\n    } catch (err) {\n        dispatch({\n            type: GET_ERRORS,\n            payload: err.response.data\n        });\n    }\n};\n\nexport const logoutUser = () => async dispatch => {\n    localStorage.removeItem(\"jwtToken\");\n    setJWTToken(false);\n    dispatch({\n        type: SET_CURRENT_USER,\n        payload: {}\n    });\n};","import {GET_ERRORS} from \"../actions/types\";\n\nconst initialState = {};\n\nexport default  function (state = initialState, action) {\n    switch(action.type){\n        case GET_ERRORS:\n            return action.payload;\n        default:\n            return state;\n    }\n}","import React from \"react\";\nimport {DELETE_PROJECT, GET_PROJECT, GET_PROJECTS} from \"../actions/types\";\n\nconst initialState = {\n    projects: [],\n    project: {}\n};\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case GET_PROJECTS:\n            return {\n                ...state,\n                projects: action.payload\n            };\n        case GET_PROJECT:\n            return {\n                ...state,\n                project: action.payload\n            };\n        case DELETE_PROJECT:\n            return {\n                ...state,\n                projects: state.projects.filter(project => project.projectIdentifier !== action.payload)\n            };\n        default:\n            return state;\n    }\n}","import {GET_BACKLOG, GET_PROJECT_TASKS, DELETE_PROJECT_TASK, GET_PROJECT_TASK} from \"../actions/types\";\n\nconst initialState = {\n    project_tasks: [],\n    project_task: {}\n};\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case GET_BACKLOG:\n            return {\n                ...state,\n                project_tasks: action.payload\n            };\n        case GET_PROJECT_TASKS:\n            return {\n                ...state,\n                project_tasks: action.payload\n            };\n        case GET_PROJECT_TASK:\n            return {\n                ...state,\n                project_task: action.payload\n            }\n        case DELETE_PROJECT_TASK:\n            return {\n                ...state,\n                project_tasks: state.project_tasks.filter(project_task => project_task.projectSequence !== action.payload)\n            };\n        default:\n            return state;\n    }\n}","import {SET_CURRENT_USER} from \"../actions/types\";\n\n\nconst initialState = {\n    validToken: false,\n    user: {}\n};\n\nconst booleanActionPayload = payload => {\n    return payload !== null;\n};\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case SET_CURRENT_USER:\n            return {\n                ...state,\n                validToken: booleanActionPayload(action.payload),\n                user: action.payload\n            };\n\n        default:\n            return state;\n    }\n}","import {combineReducers} from \"redux\";\nimport errorReducer from \"./errorReducer\";\nimport projectReducer from \"./projectReducer\";\nimport backlogReducer from \"./backlogReducer\";\nimport securityReducer from \"./securityReducer\";\n\nexport default combineReducers({\n    errors: errorReducer,\n    project: projectReducer,\n    backlog: backlogReducer,\n    security: securityReducer\n});","import {createStore, applyMiddleware, compose} from \"redux\";\nimport React from \"react\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\nimport {composeWithDevTools} from 'redux-devtools-extension/developmentOnly';\nimport {createLogger} from \"redux-logger\";\n\n\nconst initialState = {};\nlet store;\n\n\n\nconst logger = createLogger({\n    collapsed: true,\n    diff: true\n});\n\n\nif(window.navigator.userAgent.includes(\"Chrome\")){\n    store = createStore(rootReducer,\n                        initialState,\n                        composeWithDevTools(applyMiddleware(thunk,logger)));\n}else{\n    store = createStore(rootReducer, initialState, composeWithDevTools(applyMiddleware(thunk,logger)));\n}\n\n\nexport default store;","import React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {logoutUser} from \"../../actions/securityActions\";\nimport store from \"../../store\";\n\n\n\nconst pngStyle = {\n    width: \"31px\",\n    paddingBottom: \"4px\"\n};\n\nclass Header extends React.Component {\n\n    logout() {\n        store.dispatch(logoutUser());\n        window.location.href = \"/\";\n    };\n\n    render() {\n        const {validToken, user} = this.props.security;\n        const userIsAuthenticated = (\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                <ul className=\"navbar-nav mr-auto\">\n                    <li className=\"nav-item\">\n                        <Link className=\"nav-link\" to=\"/dashboard\">Dashboard</Link>\n                    </li>\n                    <li className=\"nav-item\">\n                        <Link className=\"nav-link\" to=\"/dashboard\">\n                            <i className=\"fa fa-user-circle mr-1\"><span className=\"ml-1\">{user.fullName}</span></i>\n                        </Link>\n                    </li>\n                    <li className=\"nav-item\">\n                        <Link className=\"nav-link\" to=\"/logout\" onClick={this.logout}>Logout</Link>\n                    </li>\n                </ul>\n            </div>\n        );\n\n        const userIsNotAuthenticated = (\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                <ul className=\"navbar-nav mr-auto\">\n                    <li className=\"nav-item\">\n                        <Link className=\"nav-link\" to=\"/login\">Login</Link>\n                    </li>\n                    <li className=\"nav-item\">\n                        <Link className=\"nav-link\" to=\"/register\">Register</Link>\n                    </li>\n                </ul>\n            </div>\n        );\n\n\n        let headerLinks;\n        if (validToken && user) {\n            headerLinks = userIsAuthenticated;\n        } else {\n            headerLinks = userIsNotAuthenticated;\n        }\n\n        return (\n            <div>\n                <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n                    <a className=\"navbar-brand\" href=\"/\"><img src=\"diamond1.png\" style={pngStyle}/>DiamondDash</a>\n                    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\"\n                            data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\"\n                            aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    </button>\n                    {headerLinks}\n                </nav>\n            </div>\n        );\n    }\n}\n\nHeader.propTypes = {\n    logoutUser: PropTypes.func.isRequired,\n    security: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n    security: state.security\n});\n\nexport default connect(mapStateToProps, {logoutUser})(Header);","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport {createProject} from \"../../actions/projectActions\";\nimport classnames from \"classnames\";\n\nclass AddProject extends React.Component {\n    constructor(){\n        super();\n\n        this.state = {\n            projectName: \"\",\n            projectIdentifier: \"\",\n            description: \"\",\n            startDate:\"\",\n            endDate: \"\",\n            errors:{}\n        }\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    };\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const newProject = {\n            projectName: this.state.projectName,\n            projectIdentifier: this.state.projectIdentifier,\n            description: this.state.description,\n            startDate: this.state.startDate,\n            endDate: this.state.endDate\n        };\n\n        console.log(newProject);\n        this.props.createProject(newProject, this.props.history);\n    };\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        if(nextProps.errors){\n            this.setState({errors: nextProps.errors});\n        }\n    }\n\n    render() {\n        const errors = this.state.errors;\n\n        return (\n            <div className=\"project\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8 m-auto\">\n                            <h2 className=\"text-dark pt-4\">Create - Edit Project Form</h2>\n                            <hr/>\n                            <form onSubmit={this.handleSubmit}>\n                                <div className=\"form-group\">\n                                    <input type=\"text\" className={classnames(\"form-control form-control-lg \",{\n                                        \"is-invalid\": errors.projectName\n                                    })}\n                                           placeholder=\"Project Name\" name=\"projectName\" value={this.state.projectName}\n                                           onChange={(e) => this.handleChange(e)} />\n                                    <h5 style={{color:\"#ff6347\"}}>{errors.projectName}</h5>\n                                </div>\n                                <div className=\"form-group\">\n                                    <input type=\"text\" className={classnames(\"form-control form-control-lg \",{\n                                        \"is-invalid\": errors.projectIdentifier\n                                    })}\n                                           placeholder=\"Unique Project ID\" name=\"projectIdentifier\" value={this.state.projectIdentifier}\n                                           onChange={(e) => this.handleChange(e)}/>\n                                    <h5 style={{color:\"#ff6347\"}}>{errors.projectIdentifier}</h5>\n\n                                </div>\n                                <div className=\"form-group\">\n                                    <textarea className={classnames(\"form-control form-control-lg \",{\n                                        \"is-invalid\": errors.description\n                                    })}\n                                              placeholder=\"Project Description\"  name=\"description\" value={this.state.description}\n                                              onChange={(e) => this.handleChange(e)} />\n                                    <h5 style={{color:\"#ff6347\"}}>{errors.description}</h5>\n                                </div>\n                                <h6>Start Date</h6>\n                                <div className=\"form-group\">\n                                    <input type=\"date\" className=\"form-control form-control-lg\" name=\"startDate\" value={this.state.startDate}\n                                           onChange={(e) => this.handleChange(e)} />\n                                </div>\n                                <h6>Estimated End Date</h6>\n                                <div className=\"form-group\">\n                                    <input type=\"date\" className=\"form-control form-control-lg\" name=\"endDate\" value={this.state.endDate}\n                                           onChange={(e) => this.handleChange(e)} />\n                                </div>\n\n                                <input type=\"submit\"  style={{background:\"#17a2b8\",color:\"white\"}} className=\"btn btn-block mt-4\"/>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nAddProject.propTypes = {\n    createProject : PropTypes.func.isRequired,\n    errors: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n    errors: state.errors\n});\n\nexport default connect(mapStateToProps,{createProject})(AddProject);\n","import React from \"react\";\nimport {getProject} from \"../../actions/projectActions\";\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport {createProject} from \"../../actions/projectActions\";\nimport classnames from \"classnames\";\n\n\nclass UpdateProject extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: \"\",\n            projectName: \"\",\n            projectIdentifier: \"\",\n            description: \"\",\n            startDate: \"\",\n            endDate: \"\",\n            errors: {}\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        //console.log(nextProps.project);\n        if (nextProps.errors) {\n            this.setState({errors: nextProps.errors});\n        }\n\n        this.setState({\n            id: nextProps.project.id,\n            projectName: nextProps.project.projectName,\n            projectIdentifier: nextProps.project.projectIdentifier,\n            description: nextProps.project.description,\n            startDate: nextProps.project.startDate,\n            endDate: nextProps.project.endDate\n        });\n    }\n\n\n    componentDidMount() {\n        const id = this.props.match.params.id;\n        this.props.getProject(id, this.props.history);\n    }\n\n    //changed value catcher\n    handleChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    };\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const updateProject = {\n            id: this.state.id,\n            projectName: this.state.projectName,\n            projectIdentifier: this.state.projectIdentifier,\n            description: this.state.description,\n            startDate: this.state.startDate,\n            endDate: this.state.endDate\n        };\n\n        this.props.createProject(updateProject, this.props.history);\n\n    };\n\n    render() {\n        const errors = this.state.errors;\n\n        let alertBoxName;\n        let alertBoxDesc;\n        if (Object.keys(errors).length !== 0) {\n            if (errors.projectName) {\n                alertBoxName = <div className=\"alert alert-danger\" role=\"alert\">{errors.projectName}</div>\n            }\n            if (errors.description) {\n                alertBoxDesc = <div className=\"alert alert-danger\" role=\"alert\">{errors.description}</div>\n            }\n        }\n\n\n        return (\n            <div className=\"register\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8 m-auto\">\n                            <h5 className=\"display-4 text-center\">Update Project Form</h5>\n                            <hr/>\n                            <form onSubmit={this.handleSubmit}>\n                                <div className=\"form-group\">\n                                    <input type=\"text\" className={classnames(\"form-control form-control-lg \", {\n                                        \"is-invalid\": errors.projectName\n                                    })} name=\"projectName\"\n                                           placeholder=\"Project Name\" value={this.state.projectName}\n                                           onChange={(e) => this.handleChange(e)}/>\n                                </div>\n                                <div>\n                                    {alertBoxName}\n                                </div>\n                                <div className=\"form-group\">\n                                    <input type=\"text\" className=\"form-control form-control-lg\"\n                                           placeholder=\"Unique Project ID\" name=\"projectIdentifier\"\n                                           disabled value={this.state.projectIdentifier}\n                                           onChange={(e) => this.handleChange(e)}/>\n                                </div>\n                                <div className=\"form-group\">\n                                    <textarea className={classnames(\"form-control form-control-lg \", {\n                                        \"is-invalid\": errors.description\n                                    })} name=\"description\"\n                                              placeholder=\"Project Description\" value={this.state.description}\n                                              onChange={(e) => this.handleChange(e)}/>\n                                </div>\n                                <div>\n                                    {alertBoxDesc}\n                                </div>\n                                <h6>Start Date</h6>\n                                <div className=\"form-group\">\n                                    <input type=\"date\" className=\"form-control form-control-lg\" name=\"start_date\"\n                                           value={this.state.startDate} onChange={(e) => this.handleChange(e)}/>\n                                </div>\n                                <h6>Estimated End Date</h6>\n                                <div className=\"form-group\">\n                                    <input type=\"date\" className=\"form-control form-control-lg\" name=\"end_date\"\n                                           value={this.state.endDate} onChange={(e) => this.handleChange(e)}/>\n                                </div>\n\n                                <input type=\"submit\" className=\"btn btn-lg btn-info btn-block mt-4\"/>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nUpdateProject.propTypes = {\n    getProject: PropTypes.func.isRequired,\n    createProject: PropTypes.func.isRequired,\n    project: PropTypes.object.isRequired,\n    errors: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n    project: state.project.project,\n    errors: state.errors\n});\n\n\nexport default connect(mapStateToProps, {getProject, createProject})(UpdateProject);","import axios from 'axios';\nimport {DELETE_PROJECT_TASK, GET_ERRORS, GET_PROJECT_TASK, GET_PROJECT_TASKS} from \"./types\";\n\nexport const addProjectTask = (backlogId, projectTask, history) => async dispatch => {\n    try {\n        await axios.post(`https://diamondashtool.herokuapp.com/api/backlog/${backlogId}`, projectTask);\n        history.push(`/projectBoard/${backlogId}`);\n        dispatch({\n            type: GET_ERRORS,\n            payload: {}\n        });\n    } catch (e) {\n        dispatch({\n            type: GET_ERRORS,\n            payload: e.response.data\n        });\n    }\n\n};\n\nexport const getBacklog = (backlogId) => async dispatch => {\n    try {\n        const res = await axios.get(`https://diamondashtool.herokuapp.com/api/backlog/${backlogId}`);\n        dispatch({\n            type: GET_PROJECT_TASKS,\n            payload: res.data\n        });\n    } catch (e) {\n        dispatch({\n            type: GET_ERRORS,\n            payload: e.response.data\n        });\n    }\n};\n\n\nexport const getProjectTask = (backlog_id, pt_id, history) => async dispatch => {\n    try {\n        const res = await axios.get(`https://diamondashtool.herokuapp.com/api/backlog/${backlog_id}/${pt_id}`);\n        dispatch({\n            type: GET_PROJECT_TASK,\n            payload: res.data\n        });\n    } catch (err) {\n        history.push(\"/dashboard\");\n    }\n};\n\n\nexport const deleteProjectTask = (backlogId, ptId) => async dispatch => {\n    if (window.confirm('Do you want to Delete this project task?')) {\n        await axios.delete(`https://diamondashtool.herokuapp.com/api/backlog/${backlogId}/${ptId}`);\n        dispatch({\n            type: DELETE_PROJECT_TASK,\n            payload: ptId\n        });\n    }\n};","import React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {deleteProjectTask} from \"../../../actions/backlogActions\";\nimport PropTypes from \"prop-types\";\n\n\nclass ProjectTask extends React.Component {\n\n    handleDelete = (backlogId, ptId) => {\n        this.props.deleteProjectTask(backlogId, ptId);\n    };\n\n    render() {\n        const {project_task} = this.props;\n        return (\n            <div className=\"card mb-1 bg-light\">\n                <div className=\"card-header\">\n                    <b>ID</b>: {project_task.id} || <b>Priority</b>: {project_task.priority}\n                </div>\n                <div className=\"card-body bg-light\">\n                    <h5 className=\"card-title\">{project_task.summary}</h5>\n                    <p className=\"card-text text-truncate \">\n                        {project_task.acceptanceCriteria}\n                    </p>\n                    <Link to={`/updateProjectTask/${project_task.projectIdentifer}/${project_task.projectSequence}`}\n                          className=\"btn btn-light mt-4\" style={{backgroundColor: \"#afb1b3\"}}>\n                        View / Update\n                    </Link>\n                    <button className=\"btn btn-danger ml-3\" style={{marginTop: \"8%\"}}\n                            onClick={this.handleDelete.bind(this, project_task.projectIdentifer, project_task.projectSequence)}>\n                        Delete\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n\nProjectTask.propTypes = {\n    deleteProjectTask: PropTypes.func.isRequired\n};\n\nexport default connect(null, {deleteProjectTask})(ProjectTask);","import React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport ProjectTask from \"./ProjectTasks/ProjectTask\";\n\n\nclass Backlog extends React.Component {\n    render() {\n        const styleTodo = {\n            backgroundColor: \"#b8dce2\"\n        };\n        const styleInProgress = {\n            backgroundColor: \"rgb(96, 160, 171)\"\n        };\n        const styleDone = {\n            backgroundColor: \"#17a2b8\"\n        };\n\n        const {project_tasks_prop} = this.props;\n        const tasks = project_tasks_prop.map(projectTask =>(\n            <ProjectTask key={projectTask.id} project_task={projectTask} />\n        ));\n\n        let todoTasks = [];\n        let progressTasks = [];\n        let doneTasks = [];\n\n        for(let i = 0 ; i < tasks.length ; i++){\n            if(tasks[i].props.project_task.status === 'TO_DO'){\n                todoTasks.push(tasks[i]);\n            }else if(tasks[i].props.project_task.status === 'IN_PROGRESS'){\n                progressTasks.push(tasks[i]);\n            }else {\n                doneTasks.push(tasks[i]);\n            }\n        }\n\n        return (\n            <div className=\"container\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-4\">\n                            <div className=\"card text-center mb-2\">\n                                <div className=\"card-header text-white\" style={styleTodo}>\n                                    <h3>TO DO</h3>\n                                </div>\n                            </div>\n                            {todoTasks}\n                        </div>\n                        <div className=\"col-md-4\">\n                            <div className=\"card text-center mb-2\">\n                                <div className=\"card-header text-white\" style={styleInProgress}>\n                                    <h3>In Progress</h3>\n                                </div>\n                            </div>\n                            {progressTasks}\n                        </div>\n                        <div className=\"col-md-4\">\n                            <div className=\"card text-center mb-2\">\n                                <div className=\"card-header text-white\" style={styleDone}>\n                                    <h3>Done</h3>\n                                </div>\n                            </div>\n                            {doneTasks}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Backlog;","import React from \"react\";\nimport Backlog from \"./Backlog\";\nimport {Link} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {getBacklog} from \"../../actions/backlogActions\";\n\n\nclass ProjectBoard extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            errors:{}\n        }\n    }\n\n    componentDidMount() {\n        const id = this.props.match.params.id;\n        this.props.getBacklog(id);\n    }\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        if(nextProps.errors){\n            this.setState({errors: nextProps.errors});\n        }\n    }\n\n    render() {\n        const id = this.props.match.params.id;\n        const {project_tasks}  = this.props.backlog;\n        const {errors} = this.state;\n        let BoardContent;\n\n        let BoardAlgorithm = (errors, project_tasks) => {\n            if(project_tasks.length < 1){\n                if(errors.message){\n                    return (\n                        <div className=\"alert alert-danger text-center\" role=\"alert\">{errors.message}</div>\n                    );\n                }else if(errors.projectIdentifier){\n                    return (\n                        <div className=\"alert alert-danger text-center\" role=\"alert\">{errors.projectIdentifier}</div>\n                    );\n                }\n                else{\n                    return(\n                        <div>\n                            <Link to={`/addProjectTask/${id}`} className=\"btn btn-lg btn-info\" style={{marginTop:\"25px\", marginLeft:\"12.4%\"}}>\n                                Create Project Task\n                            </Link>\n                            <br/>\n                            <hr/>\n                            <div className=\"alert alert-info text-center\" role=\"alert\">No Project Task In Your Board</div>\n                        </div>\n                    );\n                }\n            }else{\n                return  (\n                    <div>\n                        <Link to={`/addProjectTask/${id}`} className=\"btn btn-lg btn-info\" style={{marginTop:\"25px\", marginLeft:\"12.4%\"}}>\n                            Create Project Task\n                        </Link>\n                        <br/>\n                        <hr/>\n                        <Backlog  project_tasks_prop = {project_tasks} />\n                    </div>\n            );\n            }\n        };\n\n        BoardContent = BoardAlgorithm(errors,project_tasks);\n\n\n        return (\n                <div>\n                    {BoardContent}\n                </div>\n        );\n    }\n}\n\nProjectBoard.propTypes = {\n    backlog: PropTypes.object.isRequired,\n    getBacklog: PropTypes.func.isRequired,\n    errors: PropTypes.object.isRequired\n};\n\n\nconst mapStateToProject = state => ({\n    backlog: state.backlog,\n    errors: state.errors\n});\n\nexport default  connect(mapStateToProject, {getBacklog})(ProjectBoard);\n","import React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {addProjectTask} from \"../../../actions/backlogActions\";\nimport classnames from \"classnames\";\n\n\nclass AddProjectTask extends React.Component {\n\n    constructor(props){\n        super(props);\n        const id = this.props.match.params.id;\n\n        this.state = {\n            summary :\"\",\n            acceptanceCriteria : \"\",\n            status: \"\",\n            priority:0,\n            dueDate: \"\",\n            projectIdentifier: id,\n            errors:{}\n        };\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    };\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const newProjectTask = {\n            summary: this.state.summary,\n            acceptanceCriteria: this.state.acceptanceCriteria,\n            status: this.state.status,\n            priority: this.state.priority,\n            dueDate: this.state.dueDate,\n            projectIdentifier: this.state.projectIdentifier\n        };\n\n        console.log(newProjectTask);\n        this.props.addProjectTask(this.state.projectIdentifier,newProjectTask, this.props.history);\n    };\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        if(nextProps){\n            this.setState({ errors: nextProps.errors});\n        }\n    }\n\n    render() {\n        const id = this.props.match.params.id;\n        const errors = this.state.errors;\n\n        return (\n            <div>\n                <div className=\"add-PBI\">\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-md-8 m-auto\">\n                                <h4 className=\"display-5 mt-4\">Add or Update Project Task </h4>\n                                <form onSubmit={this.handleSubmit}>\n                                    <div className=\"form-group\">\n                                        <input type=\"text\" className={classnames(\"form-control form-control-lg \",{\n                                            \"is-invalid\": errors.summary\n                                        })} name=\"summary\" placeholder=\"Project Task summary\"\n                                               value={this.state.summary} onChange={(e) => this.handleChange(e)}/>\n                                        <h5 style={{color:\"#ff6347\"}}>{errors.summary}</h5>\n                                    </div>\n                                    <div className=\"form-group\">\n                                        <textarea className={classnames(\"form-control form-control-lg \",{\n                                            \"is-invalid\": errors.acceptanceCriteria})}\n                                                  placeholder=\"Acceptance Criteria\"\n                                                  name=\"acceptanceCriteria\"\n                                                  value={this.state.acceptanceCriteria} onChange={(e) => this.handleChange(e)}/>\n                                        <h5 style={{color:\"#ff6347\"}}>{errors.acceptanceCriteria}</h5>\n                                    </div>\n                                    <h6>Due Date</h6>\n                                    <div className=\"form-group\">\n                                        <input type=\"date\" className={classnames(\"form-control form-control-lg \",{\n                                            \"is-invalid\": errors.dueDate})} name=\"dueDate\"\n                                               value={this.state.dueDate}  onChange={(e) => this.handleChange(e)}/>\n                                        <h5 style={{color:\"#ff6347\"}}>{errors.dueDate}</h5>\n                                    </div>\n                                    <div className=\"form-group\">\n                                        <select className={classnames(\"form-control form-control-lg \",{\n                                            \"is-invalid\": errors.priority})} name=\"priority\"\n                                                value={this.state.priority}  onChange={(e) => this.handleChange(e)}>\n                                            <option value={0}>Select Priority</option>\n                                            <option value={1}>High</option>\n                                            <option value={2}>Medium</option>\n                                            <option value={3}>Low</option>\n                                        </select>\n                                        <h5 style={{color:\"#ff6347\"}}>{errors.priority}</h5>\n                                    </div>\n\n                                    <div className=\"form-group\">\n                                        <select className={classnames(\"form-control form-control-lg \",{\n                                            \"is-invalid\": errors.status})}\n                                                name=\"status\"\n                                                value={this.state.status} onChange={(e) => this.handleChange(e)}>\n                                            <option value=\"\">Select Status</option>\n                                            <option value=\"TO_DO\">TO DO</option>\n                                            <option value=\"IN_PROGRESS\">IN PROGRESS</option>\n                                            <option value=\"DONE\">DONE</option>\n                                        </select>\n                                        <h5 style={{color:\"#ff6347\"}}>{errors.status}</h5>\n                                    </div>\n\n                                    <input type=\"submit\" className=\"btn btn-lg btn-info btn-block mt-4\"/>\n                                </form>\n                                <Link to={`/projectBoard/${id}`} className=\"btn btn-light mt-4\">\n                                    Back to Project Board\n                                </Link>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nAddProjectTask.propTypes = {\n    addProjectTask: PropTypes.func.isRequired,\n    errors: PropTypes.object.isRequired\n};\n\nconst mapStateToProps =  state =>({\n    errors: state.errors\n});\n\n\nexport  default connect(mapStateToProps,{addProjectTask})(AddProjectTask);","import React from \"react\";\nimport classnames from \"classnames\";\nimport {Link} from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport {getProjectTask} from \"../../../actions/backlogActions\";\nimport {addProjectTask} from \"../../../actions/backlogActions\";\n\nclass UpdateProjectTask extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: \"\",\n            projectSequence: \"\",\n            summary: \"\",\n            acceptanceCriteria: \"\",\n            status: \"\",\n            priority: \"\",\n            dueDate: \"\",\n            projectIdentifier: \"\",\n            create_At: \"\",\n            errors: {}\n        }\n    }\n\n    //changed value catcher\n    handleChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    };\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const updateProjectTask = {\n            id: this.state.id,\n            projectSequence: this.state.projectSequence,\n            summary: this.state.summary,\n            acceptanceCriteria: this.state.acceptanceCriteria,\n            status: this.state.status,\n            priority: this.state.priority,\n            dueDate: this.state.dueDate,\n            projectIdentifier: this.state.projectIdentifier,\n            create_At: this.state.create_At\n        };\n\n        this.props.addProjectTask(updateProjectTask.projectIdentifier, updateProjectTask, this.props.history);\n\n    };\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        const {backlogId} = this.props.match.params;\n        if (nextProps.errors) {\n            this.setState({errors: nextProps.errors});\n        }\n        this.setState({\n            id: nextProps.project_task.id,\n            projectSequence: nextProps.project_task.projectSequence,\n            summary: nextProps.project_task.summary,\n            acceptanceCriteria: nextProps.project_task.acceptanceCriteria,\n            status: nextProps.project_task.status,\n            priority: nextProps.project_task.priority,\n            dueDate: nextProps.project_task.dueDate,\n            projectIdentifier: backlogId,\n            create_At: nextProps.project_task.create_At\n        });\n\n    }\n\n    componentDidMount() {\n        const {backlogId, ptId} = this.props.match.params;\n        this.props.getProjectTask(backlogId, ptId, this.props.history);\n    }\n\n\n    render() {\n        const errors = this.state.errors;\n        const {backlogId} = this.props.match.params;\n\n        return (\n            <div>\n                <div className=\"add-PBI\">\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-md-8 m-auto\">\n                                <h4 className=\"display-5 mt-4\">Add or Update Project Task </h4>\n                                <form onSubmit={this.handleSubmit}>\n                                    <div className=\"form-group\">\n                                        <input type=\"text\" className={classnames(\"form-control form-control-lg \", {\n                                            \"is-invalid\": errors.summary\n                                        })} name=\"summary\" placeholder=\"Project Task summary\"\n                                               value={this.state.summary} onChange={(e) => this.handleChange(e)}/>\n                                        <h5 style={{color: \"#ff6347\"}}>{errors.summary}</h5>\n                                    </div>\n                                    <div className=\"form-group\">\n                                        <textarea className={classnames(\"form-control form-control-lg \", {\n                                            \"is-invalid\": errors.acceptanceCriteria\n                                        })}\n                                                  placeholder=\"Acceptance Criteria\"\n                                                  name=\"acceptanceCriteria\"\n                                                  value={this.state.acceptanceCriteria}\n                                                  onChange={(e) => this.handleChange(e)}/>\n                                        <h5 style={{color: \"#ff6347\"}}>{errors.acceptanceCriteria}</h5>\n                                    </div>\n                                    <h6>Due Date</h6>\n                                    <div className=\"form-group\">\n                                        <input type=\"date\" className={classnames(\"form-control form-control-lg \", {\n                                            \"is-invalid\": errors.dueDate\n                                        })} name=\"dueDate\" value={this.state.dueDate}\n                                               onChange={(e) => this.handleChange(e)}/>\n                                    </div>\n                                    <div className=\"form-group\">\n                                        <select className={classnames(\"form-control form-control-lg \", {\n                                            \"is-invalid\": errors.priority\n                                        })} name=\"priority\"\n                                                value={this.state.priority} onChange={(e) => this.handleChange(e)}>\n                                            <option value={0}>Select Priority</option>\n                                            <option value={1}>High</option>\n                                            <option value={2}>Medium</option>\n                                            <option value={3}>Low</option>\n                                        </select>\n                                        <h5 style={{color: \"#ff6347\"}}>{errors.priority}</h5>\n                                    </div>\n\n                                    <div className=\"form-group\">\n                                        <select className={classnames(\"form-control form-control-lg \", {\n                                            \"is-invalid\": errors.status\n                                        })}\n                                                name=\"status\"\n                                                value={this.state.status} onChange={(e) => this.handleChange(e)}>\n                                            <option value=\"\">Select Status</option>\n                                            <option value=\"TO_DO\">TO DO</option>\n                                            <option value=\"IN_PROGRESS\">IN PROGRESS</option>\n                                            <option value=\"DONE\">DONE</option>\n                                        </select>\n                                        <h5 style={{color: \"#ff6347\"}}>{errors.status}</h5>\n                                    </div>\n\n                                    <input type=\"submit\" className=\"btn btn-lg btn-info btn-block mt-4\"/>\n                                </form>\n                                <Link to={`/projectBoard/${backlogId}`} className=\"btn btn-light mt-4\">\n                                    Back to Project Board\n                                </Link>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nUpdateProjectTask.propTypes = {\n    getProjectTask: PropTypes.func.isRequired,\n    project_task: PropTypes.object.isRequired,\n    errors: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n    project_task: state.backlog.project_task,\n    errors: state.errors\n});\n\n\nexport default connect(mapStateToProps, {getProjectTask, addProjectTask})(UpdateProjectTask);","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {createNewUser} from \"../../actions/securityActions\";\nimport classnames from \"classnames\";\n\nclass Register extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            username: \"\",\n            fullName: \"\",\n            password: \"\",\n            confirmPassword: \"\",\n            errors: {}\n        };\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    };\n\n    componentDidMount() {\n        if (this.props.security.validToken) {\n            this.props.history.push(\"/dashboard\");\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const newUser = {\n            username: this.state.username,\n            fullName: this.state.fullName,\n            password: this.state.password,\n            confirmPassword: this.state.confirmPassword,\n            errors: {}\n        };\n\n        this.props.createNewUser(newUser, this.props.history);\n        //console.log(newUser);\n    }\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        if (nextProps) {\n            this.setState({errors: nextProps.errors});\n        }\n    }\n\n\n    render() {\n        const errors = this.state.errors;\n\n        return (\n            <div className=\"register\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8 m-auto\">\n                            <h1 className=\"display-5 text-center\">Register</h1>\n                            <p className=\"lead text-center\">Create your Account</p>\n                            <form onSubmit={this.handleSubmit}>\n                                <div className=\"form-group\">\n                                    <input type=\"text\" placeholder=\"Full Name\"\n                                           name=\"fullName\" required value={this.state.fullName}\n                                           className={classnames(\"form-control form-control-lg \", {\n                                               \"is-invalid\": errors.fullName\n                                           })}\n                                           onChange={(e) => this.handleChange(e)}/>\n                                    <h5 style={{color: \"#ff6347\"}}>{errors.fullName}</h5>\n\n                                </div>\n                                <div className=\"form-group\">\n                                    <input type=\"email\" className={classnames(\"form-control form-control-lg \", {\n                                        \"is-invalid\": errors.username\n                                    })}\n                                           placeholder=\"Email Address(Username)\"\n                                           name=\"username\" value={this.state.username}\n                                           onChange={(e) => this.handleChange(e)}/>\n                                    <h5 style={{color: \"#ff6347\"}}>{errors.username}</h5>\n                                    <h5 style={{color: \"#ff6347\"}}>{errors.message}</h5>\n                                </div>\n                                <div className=\"form-group\">\n                                    <input type=\"password\" className={classnames(\"form-control form-control-lg \", {\n                                        \"is-invalid\": errors.password\n                                    })}\n                                           placeholder=\"Password\"\n                                           name=\"password\" value={this.state.password}\n                                           onChange={(e) => this.handleChange(e)}/>\n                                    <h5 style={{color: \"#ff6347\"}}>{errors.password}</h5>\n\n                                </div>\n                                <div className=\"form-group\">\n                                    <input type=\"password\" className={classnames(\"form-control form-control-lg \", {\n                                        \"is-invalid\": errors.confirmPassword\n                                    })}\n                                           placeholder=\"Confirm Password\"\n                                           name=\"confirmPassword\" value={this.state.confirmPassword}\n                                           onChange={(e) => this.handleChange(e)}/>\n                                    <h5 style={{color: \"#ff6347\"}}>{errors.confirmPassword}</h5>\n\n                                </div>\n                                <input type=\"submit\" className=\"btn btn-info btn-block mt-4\"/>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nRegister.propTypes = {\n    createNewUser: PropTypes.func.isRequired,\n    errors: PropTypes.object.isRequired,\n    security: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n    errors: state.errors,\n    security: state.security\n});\n\n\nexport default connect(mapStateToProps, {createNewUser})(Register);","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport {loginUser} from \"../../actions/securityActions\";\n\nclass Login extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            username: \"\",\n            password: \"\",\n            errors: {}\n        }\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    };\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const newLogin = {\n            username: this.state.username,\n            password: this.state.password\n        }\n        this.props.loginUser(newLogin);\n    }\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        if (nextProps.security.validToken) {\n            this.props.history.push(\"/dashboard\");\n        }\n\n        if (nextProps) {\n            this.setState({errors: nextProps.errors});\n        }\n    }\n\n    componentDidMount() {\n        if (this.props.security.validToken) {\n            this.props.history.push(\"/dashboard\");\n        }\n    }\n\n    render() {\n        const errors = this.state.errors;\n\n        return (\n            <div className=\"login\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8 m-auto\">\n                            <h1 className=\"display-5 text-center\">Log In</h1>\n                            <form onSubmit={this.handleSubmit}>\n                                <div className=\"form-group\">\n                                    <input type=\"email\" className={classnames(\"form-control form-control-lg \", {\n                                        \"is-invalid\": errors.username\n                                    })}\n                                           placeholder=\"Email Address\" name=\"username\"\n                                           onChange={(e) => this.handleChange(e)}\n                                           value={this.state.username}/>\n                                    <h5 style={{color: \"#ff6347\"}}>{errors.username}</h5>\n\n                                </div>\n                                <div className=\"form-group\">\n                                    <input type=\"password\" className={classnames(\"form-control form-control-lg \", {\n                                        \"is-invalid\": errors.password\n                                    })}\n                                           placeholder=\"Password\" name=\"password\"\n                                           onChange={(e) => this.handleChange(e)}\n                                           value={this.state.password}/>\n                                    <h5 style={{color: \"#ff6347\"}}>{errors.password}</h5>\n\n                                </div>\n                                <input type=\"submit\" className=\"btn btn-info btn-block mt-4\"/>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n\nLogin.propTypes = {\n    loginUser: PropTypes.func.isRequired,\n    errors: PropTypes.object.isRequired,\n    security: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n    security: state.security,\n    errors: state.errors\n});\n\nexport default connect(mapStateToProps, {loginUser})(Login);","import React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport Register from \"../UserManagement/Register\";\nimport Login from \"../UserManagement/Login\";\nimport '../../App.css';\n\n\nclass Landing extends React.Component {\n    render() {\n        return (\n            <div className=\"landing dash-component\">\n                <div className=\"light-overlay landing-inner text-dark\">\n                    <div className=\"container\" style={{height:\"665px\"}}>\n                        <div className=\"row\">\n                            <div className=\"col-md-12 text-center\" style={{color:\"white\"}}>\n                                <h1 className=\"display-4 mb-4 mt-5\">DiamonDash Kanban Tool</h1>\n                                <p className=\"lead\">\n                                    Create your account to join active projects or start you own\n                                </p>\n                                <hr/>\n                                <Link to=\"/login\" className=\"btn btn-lg btn-primary mr-2\">\n                                    Login\n                                </Link>\n                                <Link to=\"/register\" className=\"btn btn-lg btn-secondary mr-2\">\n                                    Register\n                                </Link>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n\nexport default Landing;","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nconst SecureRoute = ({ component: Component, security, ...otherProps }) => (\n    <Route\n        {...otherProps}\n        render={props =>\n            security.validToken === true ? (\n                <Component {...props} />\n            ) : (\n                <Redirect to=\"/login\" />\n            )\n        }\n    />\n);\n\nSecureRoute.propTypes = {\n    security: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n    security: state.security\n});\n\nexport default connect(mapStateToProps)(SecureRoute);","import React from 'react';\nimport './App.css';\nimport Dashboard from \"./components/Dashboard\";\nimport Header from \"./components/Layout/Header\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\nimport AddProject from \"./components/Project/AddProject\";\nimport {Provider} from \"react-redux\";\nimport store from \"./store\";\nimport UpdateProject from \"./components/Project/UpdateProject\";\nimport ProjectBoard from \"./components/ProjectBoard/ProjectBoard\";\nimport AddProjectTask from \"./components/ProjectBoard/ProjectTasks/AddProjectTask\";\nimport UpdateProjectTask from \"./components/ProjectBoard/ProjectTasks/UpdateProjectTask\";\nimport Landing from \"./components/Layout/Landing\";\nimport Register from \"./components/UserManagement/Register\";\nimport Login from \"./components/UserManagement/Login\";\nimport jwt_decode from \"jwt-decode\";\nimport setJWTToken from \"./SecurityUtils/setJWTToken\";\nimport {SET_CURRENT_USER} from \"./actions/types\";\nimport {logoutUser} from \"./actions/securityActions\";\nimport SecureRoute from \"./SecurityUtils/secureRoute\";\n\nconst jwtToken = localStorage.jwtToken;\n\nif (jwtToken) {\n    setJWTToken(jwtToken);\n    const decoded_jwtToken = jwt_decode(jwtToken);\n    store.dispatch({\n        type: SET_CURRENT_USER,\n        payload: decoded_jwtToken\n    });\n\n    let currentTime = Date.now() / 1000;\n    if (decoded_jwtToken.exp < currentTime) {\n        store.dispatch(logoutUser());\n        window.location.href = \"/\";\n    }\n}\n\nfunction App() {\n    return (\n        <Provider store={store}>\n            <Router>\n                <div className=\"App\">\n                    <Header/>\n                    <Switch>\n                        <SecureRoute exact path=\"/dashboard\" component={Dashboard}/>\n                        <SecureRoute exact path=\"/addProject\" component={AddProject}/>\n                        <SecureRoute exact path=\"/updateProject/:id\" component={UpdateProject}/>\n                        <SecureRoute exact path=\"/projectBoard/:id\" component={ProjectBoard}/>\n                        <SecureRoute exact path=\"/addProjectTask/:id\" component={AddProjectTask}/>\n                        <SecureRoute exact path=\"/updateProjectTask/:backlogId/:ptId\" component={UpdateProjectTask}/>\n                    </Switch>\n                    <Route exact path=\"/\" component={Landing}/>\n                    <Route exact path=\"/register\" component={Register}/>\n                    <Route exact path=\"/login\" component={Login}/>\n                </div>\n            </Router>\n        </Provider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}